//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/MagicStone/InteractWithStone.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InteractWithStone: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InteractWithStone()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InteractWithStone"",
    ""maps"": [
        {
            ""name"": ""InteractMap"",
            ""id"": ""b61aadb3-4862-47b4-86bd-5b70c20ac337"",
            ""actions"": [
                {
                    ""name"": ""InteractItem"",
                    ""type"": ""Button"",
                    ""id"": ""9818f644-3cec-485f-aa05-40e883217eae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58f2da62-1c87-4919-9714-30f868801d9f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InteractMap
        m_InteractMap = asset.FindActionMap("InteractMap", throwIfNotFound: true);
        m_InteractMap_InteractItem = m_InteractMap.FindAction("InteractItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InteractMap
    private readonly InputActionMap m_InteractMap;
    private List<IInteractMapActions> m_InteractMapActionsCallbackInterfaces = new List<IInteractMapActions>();
    private readonly InputAction m_InteractMap_InteractItem;
    public struct InteractMapActions
    {
        private @InteractWithStone m_Wrapper;
        public InteractMapActions(@InteractWithStone wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractItem => m_Wrapper.m_InteractMap_InteractItem;
        public InputActionMap Get() { return m_Wrapper.m_InteractMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractMapActions set) { return set.Get(); }
        public void AddCallbacks(IInteractMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractMapActionsCallbackInterfaces.Add(instance);
            @InteractItem.started += instance.OnInteractItem;
            @InteractItem.performed += instance.OnInteractItem;
            @InteractItem.canceled += instance.OnInteractItem;
        }

        private void UnregisterCallbacks(IInteractMapActions instance)
        {
            @InteractItem.started -= instance.OnInteractItem;
            @InteractItem.performed -= instance.OnInteractItem;
            @InteractItem.canceled -= instance.OnInteractItem;
        }

        public void RemoveCallbacks(IInteractMapActions instance)
        {
            if (m_Wrapper.m_InteractMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractMapActions @InteractMap => new InteractMapActions(this);
    public interface IInteractMapActions
    {
        void OnInteractItem(InputAction.CallbackContext context);
    }
}
